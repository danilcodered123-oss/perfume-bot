import logging, json, os, asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, Text
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from pathlib import Path
import config

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = config.BOT_TOKEN
ADMIN_ID = config.ADMIN_ID
CARD_NUMBER = config.CARD_NUMBER

if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE" or not BOT_TOKEN:
    logger.warning("BOT_TOKEN not set in config.py. Please add your token before running on Render.")

bot = Bot(token=BOT_TOKEN) if BOT_TOKEN and BOT_TOKEN != "YOUR_BOT_TOKEN_HERE" else None
dp = Dispatcher()

BASE_DIR = Path(__file__).parent
DATA_FILE = BASE_DIR / "data" / "products.json"
IMAGES_DIR = BASE_DIR / "images"

# load products
def load_products():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return []

PRODUCTS = load_products()

# simple in-memory carts: {user_id: [{index, name, price, image}]}
CARTS = {}

# Helpers
def format_price(p):
    return str(p)

def build_main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(types.KeyboardButton('üõç –ö–∞—Ç–∞–ª–æ–≥'), types.KeyboardButton('üìã –ü—Ä–∞–π—Å'))
    kb.row(types.KeyboardButton('üßæ –ö–æ—Ä–∑–∏–Ω–∞'), types.KeyboardButton('üí≥ –û–ø–ª–∞—Ç–∞'))
    kb.row(types.KeyboardButton('üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'), types.KeyboardButton('‚ùå –í—ã–π—Ç–∏'))
    return kb

@dp.message(Command('start'))
async def cmd_start(message: types.Message):
    await message.answer("üå∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±—É—Ç–∏–∫ –¥—É—Ö–æ–≤!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=build_main_menu())

@dp.message(Text(equals='üõç –ö–∞—Ç–∞–ª–æ–≥'))
async def catalog_cmd(message: types.Message):
    if not PRODUCTS:
        await message.answer('–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.')
        return
    # show first product (index 0)
    await send_product(message.chat.id, 0)

async def send_product(chat_id, index):
    if index < 0 or index >= len(PRODUCTS):
        return
    p = PRODUCTS[index]
    caption = f"**{p.get('name','')}**\n–¶–µ–Ω–∞: {p.get('price','')} ‚ÇΩ"
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(InlineKeyboardButton('üõí –í –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'add:{index}'))
    nav = []
    if index > 0:
        nav.append(InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'nav:{index-1}'))
    nav.append(InlineKeyboardButton('üîô –í –º–µ–Ω—é', callback_data='menu'))
    if index < len(PRODUCTS)-1:
        nav.append(InlineKeyboardButton('–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è', callback_data=f'nav:{index+1}'))
    kb.row(*nav)
    img_path = IMAGES_DIR / p.get('image','')
    try:
        if img_path.exists():
            await (bot or message_bot()).send_photo(chat_id, InputFile(img_path), caption=caption, reply_markup=kb, parse_mode='Markdown')
        else:
            await (bot or message_bot()).send_message(chat_id, caption, reply_markup=kb, parse_mode='Markdown')
    except Exception as e:
        # fallback to message if photo fails
        await (bot or message_bot()).send_message(chat_id, caption, reply_markup=kb, parse_mode='Markdown')

# helper to create a dummy bot for local preview when BOT_TOKEN not set
def message_bot():
    class Dummy:
        async def send_message(self, chat_id, text, **kwargs):
            print(f"SEND MESSAGE to {chat_id}: {text[:80]}")
        async def send_photo(self, chat_id, photo, **kwargs):
            print(f"SEND PHOTO to {chat_id}: {photo}")
    return Dummy()

@dp.callback_query()
async def cb_handler(cb: types.CallbackQuery):
    data = cb.data or ''
    if data.startswith('add:'):
        idx = int(data.split(':',1)[1])
        user = cb.from_user.id
        CARTS.setdefault(user, []).append(PRODUCTS[idx])
        await cb.answer('–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É ‚úÖ', show_alert=False)
    elif data.startswith('nav:'):
        idx = int(data.split(':',1)[1])
        await send_product(cb.message.chat.id, idx)
        await cb.answer()
    elif data == 'menu':
        await cb.message.delete()
        await bot.send_message(cb.message.chat.id, '–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é', reply_markup=build_main_menu())
        await cb.answer()
    else:
        await cb.answer()

@dp.message(Text(equals='üìã –ü—Ä–∞–π—Å'))
async def price_cmd(message: types.Message):
    if not PRODUCTS:
        await message.answer('–ü—Ä–∞–π—Å –ø—É—Å—Ç.')
        return
    lines = [f"{i+1}. {p.get('name','')} ‚Äî {p.get('price','')} ‚ÇΩ" for i,p in enumerate(PRODUCTS)]
    await message.answer('üíé –ü—Ä–∞–π—Å-–ª–∏—Å—Ç:\n' + '\n'.join(lines))

@dp.message(Text(equals='üßæ –ö–æ—Ä–∑–∏–Ω–∞'))
async def cart_cmd(message: types.Message):
    user = message.from_user.id
    cart = CARTS.get(user, [])
    if not cart:
        await message.answer('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.')
        return
    lines = []
    total = 0
    for i, it in enumerate(cart):
        lines.append(f"{i+1}. {it.get('name','')} ‚Äî {it.get('price','')} ‚ÇΩ")
        try:
            total += float(str(it.get('price','')).replace(',','.'))
        except Exception:
            pass
    kb = types.InlineKeyboardMarkup(row_width=2)
    # add delete buttons per item
    for i, it in enumerate(cart):
        kb.add(InlineKeyboardButton(f'–£–¥–∞–ª–∏—Ç—å {i+1}', callback_data=f'del:{i}'))
    kb.add(InlineKeyboardButton('‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='checkout'))
    kb.add(InlineKeyboardButton('–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data='clear'))
    await message.answer('üßæ –ö–æ—Ä–∑–∏–Ω–∞:\n' + '\n'.join(lines) + f"\n\n–ò—Ç–æ–≥–æ: {total} ‚ÇΩ", reply_markup=kb)

@dp.callback_query()
async def cart_callbacks(cb: types.CallbackQuery):
    data = cb.data or ''
    user = cb.from_user.id
    if data.startswith('del:'):
        idx = int(data.split(':',1)[1])
        cart = CARTS.get(user, [])
        if 0 <= idx < len(cart):
            removed = cart.pop(idx)
            await cb.answer(f'–£–¥–∞–ª–µ–Ω–æ: {removed.get("name","")}', show_alert=False)
        await cb.message.delete()
        # re-show cart
        await cart_cmd(cb.message)
    elif data == 'clear':
        CARTS[user] = []
        await cb.message.edit_text('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.')
        await cb.answer()
    elif data == 'checkout':
        cart = CARTS.get(user, [])
        if not cart:
            await cb.answer('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞', show_alert=True); return
        total = 0
        lines = []
        for it in cart:
            lines.append(f" - {it.get('name','')} ‚Äî {it.get('price','')} ‚ÇΩ")
            try:
                total += float(str(it.get('price','')).replace(',','.'))
            except:
                pass
        # notify user with card info
        await cb.message.answer(f"üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {total} ‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É:\n{CARD_NUMBER}\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        # notify admin
        admin_text = f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @{cb.from_user.username or cb.from_user.full_name}\n" + '\n'.join(lines) + f"\n–ò—Ç–æ–≥–æ: {total} ‚ÇΩ"
        if bot:
            try:
                await bot.send_message(ADMIN_ID, admin_text)
            except Exception as e:
                print('Failed to send admin message', e)
        CARTS[user] = []  # clear cart after checkout
        await cb.answer('–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω.')
    else:
        await cb.answer()

@dp.message(Text(equals='üí≥ –û–ø–ª–∞—Ç–∞'))
async def pay_info(message: types.Message):
    await message.answer(f"–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π:\n{CARD_NUMBER}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.")

@dp.message(Text(equals='üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'))
async def contact_admin(message: types.Message):
    admin_link = f"tg://user?id={ADMIN_ID}"
    kb = types.InlineKeyboardMarkup().add(InlineKeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É', url=admin_link))
    await message.answer('–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:', reply_markup=kb)

@dp.message(Text(equals='‚ùå –í—ã–π—Ç–∏'))
async def exit_cmd(message: types.Message):
    await message.answer('–í—ã—Ö–æ–¥. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è ‚Äî /start', reply_markup=types.ReplyKeyboardRemove())

async def main():
    if bot:
        await dp.start_polling(bot)
    else:
        print('BOT_TOKEN not configured; running in dry mode (no Telegram).')
        while True:
            await asyncio.sleep(3600)

if __name__ == '__main__':
    asyncio.run(main())
