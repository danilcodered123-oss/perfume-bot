import os, asyncio, logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, Text
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
import openpyxl
from pathlib import Path

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

ADMIN_IDS = [589839267]
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
if not BOT_TOKEN:
    print("Warning: BOT_TOKEN not set. Running in local test mode.")
bot = Bot(token=BOT_TOKEN) if BOT_TOKEN else None
dp = Dispatcher()

DATA_XLSX = Path("data/price.xlsx")
IMAGES_DIR = Path("images")

def load_items():
    wb = openpyxl.load_workbook(DATA_XLSX)
    ws = wb.active
    items = []
    for row in ws.iter_rows(min_row=2, values_only=True):
        image_file, name, price = row
        items.append({"image_file": image_file or "", "name": name or "", "price": price or ""})
    return items

items_cache = load_items()

MAIN_MENU = types.ReplyKeyboardMarkup(keyboard=[
    [types.KeyboardButton("üõç –ö–∞—Ç–∞–ª–æ–≥"), types.KeyboardButton("üíé –ü—Ä–∞–π—Å")],
    [types.KeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞"), types.KeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")],
    [types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"), types.KeyboardButton("‚ùå –í—ã–π—Ç–∏")]
], resize_keyboard=True)

@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer("üå∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ La Maison Parfum!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=MAIN_MENU)

@dp.message(Text(equals="üõç –ö–∞—Ç–∞–ª–æ–≥"))
async def catalog_cmd(message: types.Message):
    # show first item
    if not items_cache:
        await message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.")
        return
    item = items_cache[0]
    img_path = IMAGES_DIR / item['image_file'] if item['image_file'] else None
    caption = f"**{item['name']}**\n–¶–µ–Ω–∞: {item['price']}"
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton('üõí –ö—É–ø–∏—Ç—å', callback_data='buy:0'), InlineKeyboardButton('‚û°Ô∏è –í–ø–µ—Ä—ë–¥', callback_data='next:0'))
    if img_path and img_path.exists():
        await message.answer_photo(photo=img_path.open('rb'), caption=caption, reply_markup=kb, parse_mode='Markdown')
    else:
        await message.answer(caption, reply_markup=kb, parse_mode='Markdown')

@dp.callback_query()
async def cb_handler(cb: types.CallbackQuery):
    data = cb.data or ''
    if data.startswith('next:'):
        idx = int(data.split(':',1)[1]) + 1
        if idx >= len(items_cache):
            await cb.answer('–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–≤–∞—Ä', show_alert=True)
            return
        item = items_cache[idx]
        img_path = IMAGES_DIR / item['image_file'] if item['image_file'] else None
        caption = f"**{item['name']}**\n–¶–µ–Ω–∞: {item['price']}"
        kb = InlineKeyboardMarkup().add(InlineKeyboardButton('üõí –ö—É–ø–∏—Ç—å', callback_data=f'buy:{idx}'), InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'prev:{idx}'), InlineKeyboardButton('‚û°Ô∏è –í–ø–µ—Ä—ë–¥', callback_data=f'next:{idx}'))
        try:
            if img_path and img_path.exists():
                # edit message with media might fail; safer to send new photo
                await cb.message.answer_photo(photo=img_path.open('rb'), caption=caption, reply_markup=kb, parse_mode='Markdown')
            else:
                await cb.message.answer(caption, reply_markup=kb, parse_mode='Markdown')
        except Exception as e:
            await cb.message.answer(caption, reply_markup=kb, parse_mode='Markdown')
        await cb.answer()
    elif data.startswith('prev:'):
        idx = int(data.split(':',1)[1]) - 1
        if idx < 0:
            await cb.answer('–≠—Ç–æ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä', show_alert=True)
            return
        item = items_cache[idx]
        img_path = IMAGES_DIR / item['image_file'] if item['image_file'] else None
        caption = f"**{item['name']}**\n–¶–µ–Ω–∞: {item['price']}"
        kb = InlineKeyboardMarkup().add(InlineKeyboardButton('üõí –ö—É–ø–∏—Ç—å', callback_data=f'buy:{idx}'), InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'prev:{idx}'), InlineKeyboardButton('‚û°Ô∏è –í–ø–µ—Ä—ë–¥', callback_data=f'next:{idx}'))
        try:
            if img_path and img_path.exists():
                await cb.message.answer_photo(photo=img_path.open('rb'), caption=caption, reply_markup=kb, parse_mode='Markdown')
            else:
                await cb.message.answer(caption, reply_markup=kb, parse_mode='Markdown')
        except Exception:
            await cb.message.answer(caption, reply_markup=kb, parse_mode='Markdown')
        await cb.answer()
    elif data.startswith('buy:'):
        idx = int(data.split(':',1)[1])
        item = items_cache[idx]
        await cb.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∫—É–ø–∫—É: {item['name']} ‚Äî {item['price']}. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.")
        await cb.answer('–î–æ–±–∞–≤–ª–µ–Ω–æ')
    else:
        await cb.answer()

@dp.message(Text(equals='üíé –ü—Ä–∞–π—Å'))
async def price_cmd(message: types.Message):
    if not items_cache:
        await message.answer('–ü—Ä–∞–π—Å –ø—É—Å—Ç.')
        return
    lines = []
    for it in items_cache:
        lines.append(f"{it['name']} ‚Äî {it['price']}")
    await message.answer('üíé –ü—Ä–∞–π—Å-–ª–∏—Å—Ç:\n' + '\n'.join(lines))

@dp.message(Text(equals='üí≥ –û–ø–ª–∞—Ç–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞'))
async def pay_cmd(message: types.Message):
    await message.answer('–û–ø–ª–∞—Ç–∞: –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É, QIWI. –î–æ—Å—Ç–∞–≤–∫–∞: –ø–æ –†–æ—Å—Å–∏–∏ –∫—É—Ä—å–µ—Ä–æ–º.')

@dp.message(Text(equals='üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞'))
async def support_cmd(message: types.Message):
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç –µ–≥–æ.')

@dp.message(Text(equals='‚ùå –í—ã–π—Ç–∏'))
async def exit_cmd(message: types.Message):
    await message.answer('–í—ã—Ö–æ–¥. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è ‚Äî /start', reply_markup=types.ReplyKeyboardRemove())

async def main():
    print('Bot starting...')
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
